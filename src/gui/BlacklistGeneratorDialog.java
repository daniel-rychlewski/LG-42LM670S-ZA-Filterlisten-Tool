package gui;

import javax.swing.*;
import java.awt.*;
import java.io.FileWriter;
import java.io.IOException;

public class BlacklistGeneratorDialog {
    private JPanel panel1;
    private JCheckBox onlineDiensteVonLGCheckBox;
    private JCheckBox werbungVonLGServernCheckBox;
    private JCheckBox dasTrackingDesWerbeverhaltensCheckBox;
    private JCheckBox werbungVonDrittservernSollCheckBox;
    private JCheckBox dasTrackingDesWerbeverhaltensCheckBox1;
    private JCheckBox iconsImLGAppCheckBox;
    private JCheckBox dieSucheNachFirmwareCheckBox;
    private JCheckBox dasHerunterladenVonFirmwareCheckBox;
    private JButton blacklistJetztGenerierenLassenButton;

    private BlacklistGeneratorDialog() {
        blacklistJetztGenerierenLassenButton.addActionListener(e -> {
            try {
                // Generiere Blacklist
                final FileWriter writer = new FileWriter("Blacklist_" + System.currentTimeMillis() + ".txt");
                writer.write("kr.lgtvsdp.com" + "\n");
                if (onlineDiensteVonLGCheckBox.isSelected()) {
                    writer.write("DE.lgtvsdp.com" + "\n");
                }
                if (werbungVonLGServernCheckBox.isSelected()) {
                    writer.write("DE.ad.lgsmartad.com" + "\n");
                    writer.write("de.ad.lgsmartad.com" + "\n");
                }
                if (dasTrackingDesWerbeverhaltensCheckBox.isSelected()) {
                    writer.write("DE.info.lgsmartad.com" + "\n");
                    writer.write("de.info.lgsmartad.com" + "\n");
                }
                if (werbungVonDrittservernSollCheckBox.isSelected()) {
                    writer.write("cdn.smartclip.net" + "\n");
                    writer.write("s1.adform.net" + "\n");
                }
                if (dasTrackingDesWerbeverhaltensCheckBox1.isSelected()) {
                    writer.write("stats.smartclip.net" + "\n");
                    writer.write("stats-irl.sxp.smartclip.net" + "\n");
                    writer.write("track.adform.net" + "\n");
                }
                if (iconsImLGAppCheckBox.isSelected()) {
                    writer.write("ngfts.lge.com" + "\n");
                }
                if (dieSucheNachFirmwareCheckBox.isSelected()) {
                    writer.write("snu.lge.com" + "\n");
                }
                if (dasHerunterladenVonFirmwareCheckBox.isSelected()) {
                    writer.write("su.lge.com" + "\n");
                }
                writer.close();

            } catch (IOException e1) {
                e1.printStackTrace();
            }

            BlacklistGenerated.main(null);
        });
    }

    public static void main(String... args) {
        JFrame frame = new JFrame("BlacklistGeneratorDialog");
        frame.setContentPane(new BlacklistGeneratorDialog().panel1);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(5, 5, 5, 5), -1, -1));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(11, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Bitte klicken Sie auf die jeweilige Checkbox, um die rechts daneben beschriebene FunktionalitÃ¤t zu blockieren.");
        panel2.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Klicken Sie im Anschluss auf den Button, um Ihre Blacklist generieren zu lassen:");
        panel2.add(label2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        onlineDiensteVonLGCheckBox = new JCheckBox();
        onlineDiensteVonLGCheckBox.setText("Online-Dienste von LG sollen auf dem Smart-TV blockiert werden.");
        panel2.add(onlineDiensteVonLGCheckBox, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        werbungVonLGServernCheckBox = new JCheckBox();
        werbungVonLGServernCheckBox.setText("Werbung von LG-Servern soll blockiert werden.");
        panel2.add(werbungVonLGServernCheckBox, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dasTrackingDesWerbeverhaltensCheckBox = new JCheckBox();
        dasTrackingDesWerbeverhaltensCheckBox.setText("Das Tracking des Werbeverhaltens von LG-Servern soll blockiert werden.");
        panel2.add(dasTrackingDesWerbeverhaltensCheckBox, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        werbungVonDrittservernSollCheckBox = new JCheckBox();
        werbungVonDrittservernSollCheckBox.setText("Werbung von Drittservern soll blockiert werden.");
        panel2.add(werbungVonDrittservernSollCheckBox, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dasTrackingDesWerbeverhaltensCheckBox1 = new JCheckBox();
        dasTrackingDesWerbeverhaltensCheckBox1.setText("Das Tracking des Werbeverhaltens von Drittservern soll blockiert werden.");
        panel2.add(dasTrackingDesWerbeverhaltensCheckBox1, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        iconsImLGAppCheckBox = new JCheckBox();
        iconsImLGAppCheckBox.setText("Icons im LG App Store sollen blockiert werden.");
        panel2.add(iconsImLGAppCheckBox, new com.intellij.uiDesigner.core.GridConstraints(7, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dieSucheNachFirmwareCheckBox = new JCheckBox();
        dieSucheNachFirmwareCheckBox.setText("Die Suche nach Firmware-Updates soll blockiert werden.");
        panel2.add(dieSucheNachFirmwareCheckBox, new com.intellij.uiDesigner.core.GridConstraints(8, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dasHerunterladenVonFirmwareCheckBox = new JCheckBox();
        dasHerunterladenVonFirmwareCheckBox.setText("Das Herunterladen von Firmware-Updates soll blockiert werden.");
        panel2.add(dasHerunterladenVonFirmwareCheckBox, new com.intellij.uiDesigner.core.GridConstraints(9, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        blacklistJetztGenerierenLassenButton = new JButton();
        blacklistJetztGenerierenLassenButton.setText("Blacklist jetzt generieren lassen");
        panel1.add(blacklistJetztGenerierenLassenButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
