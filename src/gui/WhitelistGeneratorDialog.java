package gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class WhitelistGeneratorDialog {
    private JPanel panel1;
    private JCheckBox onlineDiensteVonLGCheckBox;
    private JCheckBox iconsImLGAppCheckBox;
    private JCheckBox dieAppTagesschauSollCheckBox;
    private JCheckBox dieAppAmazonInstantCheckBox;
    private JCheckBox dieAppMKIPTVCheckBox;
    private JCheckBox dieAppYouTubeSollCheckBox;
    private JButton whitelistJetztGenerierenLassenButton;

    private WhitelistGeneratorDialog() {
        whitelistJetztGenerierenLassenButton.addActionListener(e -> {
            // Generiere Whitelist
            try {
                final FileWriter writer = new FileWriter("Whitelist_" + System.currentTimeMillis() + ".txt");
                // Auswerten der Checkboxen
                if (onlineDiensteVonLGCheckBox.isSelected()) {
                    writer.write("DE.lgtvsdp.com\n");
                }
                if (iconsImLGAppCheckBox.isSelected()) {
                    writer.write("ngfts.lge.com" + "\n");
                }
                if (dieAppTagesschauSollCheckBox.isSelected()) {
                    writer.write("www.tagesschau.de" + "\n");
                }
                if (dieAppMKIPTVCheckBox.isSelected()) {
                    writer.write("51.255.48.71" + "\n");
                    writer.write("tools.mkvod.info" + "\n");
                    writer.write("live.netd.com.tr" + "\n");
                }
                if (dieAppAmazonInstantCheckBox.isSelected()) {
                    writer.write("atv-eu.amazon.com" + "\n");
                    writer.write("atv-ext-eu.amazon.com" + "\n");
                    writer.write("g-ecx.images-amazon.com" + "\n");
                    writer.write("g-ec2.images-amazon.com" + "\n");
                    writer.write("images-eu.ssl-images-amazon.com" + "\n");
                    writer.write("images-na.ssl-images-amazon.com" + "\n");
                    writer.write("ecx.images-amazon.com" + "\n");
                    writer.write("api.amazon.de" + "\n");
                    writer.write("eu.api.amazonvideo.com" + "\n");
                    writer.write("m.media-amazon.com" + "\n");
                    writer.write("akamaihd.net" + "\n");
                }
                if (dieAppYouTubeSollCheckBox.isSelected()) {
                    writer.write("www.youtube.com" + "\n");
                    writer.write("s.ytimg.com" + "\n");
                    writer.write("youtube.googleapis.com" + "\n");
                    writer.write("www.youtube-nocookie.com" + "\n");
                    writer.write("www.googleapis.com" + "\n");
                    writer.write("i.ytimg.com" + "\n");
                    writer.write("i1.ytimg.com" + "\n");
                    writer.write("googlevideo.com" + "\n");
                }
                writer.close();

            } catch (IOException e1) {
                e1.printStackTrace();
            }

            WhitelistGenerated.main(null);
        });
    }

    public static void main(String... args) {
        JFrame frame = new JFrame("WhitelistGeneratorDialog");
        frame.setContentPane(new WhitelistGeneratorDialog().panel1);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(5, 5, 5, 5), -1, -1));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(9, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(panel3, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        onlineDiensteVonLGCheckBox = new JCheckBox();
        onlineDiensteVonLGCheckBox.setEnabled(true);
        onlineDiensteVonLGCheckBox.setText("Online-Dienste von LG sollen weiterhin auf dem Smart-TV funktionieren.");
        panel3.add(onlineDiensteVonLGCheckBox, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        iconsImLGAppCheckBox = new JCheckBox();
        iconsImLGAppCheckBox.setText("Icons im LG App Store sollen weiterhin angezeigt werden können.");
        panel3.add(iconsImLGAppCheckBox, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dieAppTagesschauSollCheckBox = new JCheckBox();
        dieAppTagesschauSollCheckBox.setText("Die App \"Tagesschau\" soll weiterhin funktionieren.");
        panel3.add(dieAppTagesschauSollCheckBox, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dieAppAmazonInstantCheckBox = new JCheckBox();
        dieAppAmazonInstantCheckBox.setText("Die App \"Amazon Instant Video\" soll weiterhin funktionieren.");
        panel3.add(dieAppAmazonInstantCheckBox, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dieAppMKIPTVCheckBox = new JCheckBox();
        dieAppMKIPTVCheckBox.setText("Die App \"MK IPTV\" soll weiterhin funktionieren.");
        panel3.add(dieAppMKIPTVCheckBox, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dieAppYouTubeSollCheckBox = new JCheckBox();
        dieAppYouTubeSollCheckBox.setText("Die App \"YouTube\" soll weiterhin funktionieren.");
        panel3.add(dieAppYouTubeSollCheckBox, new com.intellij.uiDesigner.core.GridConstraints(7, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Bitte klicken Sie auf die jeweilige Checkbox, um die rechts daneben beschriebene Funktionalität zuzulassen.");
        panel3.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Klicken Sie im Anschluss auf den Button, um Ihre Whitelist generieren zu lassen:");
        panel3.add(label2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        whitelistJetztGenerierenLassenButton = new JButton();
        whitelistJetztGenerierenLassenButton.setText("Whitelist jetzt generieren lassen");
        panel1.add(whitelistJetztGenerierenLassenButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
